import OpenAI from "openai";
import { Markup } from "telegraf";
import { button } from "telegraf/markup";
import { rand } from "#lib/helpers";

const prompt = `
–¢—ã - —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–í —Ç–µ–≥–∞—Ö –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Ç–µ–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö.
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫—Ä—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å—Ç–∞—Ä—à–µ-18: –¥–∞
- –ö–æ–Ω—Ç–µ–Ω—Ç-–Ω–µ-–Ω–∞—Ä—É—à–∞–µ—Ç-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è-OpenAI: –¥–∞

–ü—Ä–∞–≤–∏–ª–∞:
- –ù–µ –∏—Å–∫–∞–∂–∞—Ç—å —Ç–µ–≥–∏, –Ω–µ –º–µ–Ω—è—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
- –ù–µ —É–±–∏—Ä–∞—Ç—å _ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
- –¢—Ä–∏ –º–∞—Å—Å–∏–≤–∞ —Å —Ç–µ–≥–∞–º–∏ –ø–æ —Ç—Ä–∏ —à—Ç—É–∫–∏ –≤ –∫–∞–∂–¥–æ–º
- –£—á–∏—Ç—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –≤ –∫–∞–∂–¥–æ–π –ø–æ–¥–±–æ—Ä–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: JSON. –ü—Ä–∏–º–µ—Ä: [{'tags': ['tag1', 'tag2'], nsfw: true/false}, ...#limit:5]
–£—á–∏—Ç—ã–≤–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä #limit
–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç
–ï—Å–ª–∏ JSON –æ–±—ä–µ–∫—Ç –Ω–µ –≤–∞–ª–∏–¥–µ–Ω - –∏—Å–ø—Ä–∞–≤—å –µ–≥–æ

–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤—å JSON –æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{ tags: null, description: '–æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏' }]

–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:

`

function gRE(arr, n) {
  let result = [];
  for (let i = 0; i < n; i++) {
      let randomIndex = Math.floor(Math.random() * arr.length);
      result.push(arr[randomIndex]);
  }
  return result;
}

const hentaiSuggestionsGPT = (ctx, tags, requestTags = '') => {
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  const joinedTags = Array.from(new Set(tags.flat()))
  const jestFilter = joinedTags.filter(word => !joinedTags.some(otherWord => otherWord !== word && otherWord.includes(word)));

  const message = { content: prompt + jestFilter.join(' '), role: "system" }
  openai.chat.completions.create({
    messages: [message],
    model: "gpt-3.5-turbo",
  }).then((res) => {
    // const req = res.choices[0].message.content.split('\n').filter(item => item !== '').map((e, i) => { return `${i+1}. ${e}` })
    console.log(res.choices[0].message.content)
    const resJson = JSON.parse(res.choices[0].message.content)
    console.log(resJson);
    const req = resJson.map((el, i) => `${i + 1}. ${el.tags.join(' ')} = ${el.description || ''} ${el.nsfw ? 'üîû' : ''}`)

    const buttons = req.map((_, i) => button.callback(i + 1, `henSug-${i}`))
    ctx.sendMessage(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ${requestTags}\n${req.join('\n')}`, Markup.inlineKeyboard([
      buttons
    ])
    );

  }).catch((e) => console.log(e));
}

const hentaiSuggestionsBasic = (ctx, tags, requestTags = '') => {
  const jTags = Array.from(new Set(tags.flat()))
  const randomList = [gRE(jTags, rand(2,5)), gRE(jTags, rand(2,5)), gRE(jTags, rand(2,5))]
  const req = randomList.map((el, i) => `${i+1}. ${el.join(' ')}`)
  const buttons = req.map((_, i) => button.callback(i + 1, `henSug-${i}`))
    ctx.sendMessage(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ${requestTags}\n${req.join('\n')}`, Markup.inlineKeyboard([buttons]));
};

const hentaiSuggestions = (ctx, tags, requestTags) => {
  hentaiSuggestionsBasic(ctx, tags, requestTags) // —Ö–∑ –º–± –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—é
}

export default hentaiSuggestions;
